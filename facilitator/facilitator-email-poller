#!/usr/bin/env python

import email
import getopt
import imaplib
import math
import os
import re
import socket
import ssl
import stat
import sys
import tempfile
import time

import fac

from hashlib import sha1
from M2Crypto import X509

DEFAULT_IMAP_HOST = "imap.gmail.com"
DEFAULT_IMAP_PORT = 993
DEFAULT_EMAIL_ADDRESS = "flashproxyreg.a@gmail.com"
DEFAULT_LOG_FILENAME = "facilitator-email-poller.log"

POLL_INTERVAL = 60

FACILITATOR_ADDR = ("127.0.0.1", 9002)

# Switch to this user after dropping root priviledges.
USER = "fac"

# We trust no other CA certificate than this.
#
# To find the certificate to copy here,
# $ strace openssl s_client -connect imap.gmail.com:993 -verify 10 -CApath /etc/ssl/certs 2>&1 | grep /etc/ssl/certs
# stat("/etc/ssl/certs/XXXXXXXX.0", {st_mode=S_IFREG|0644, st_size=YYYY, ...}) = 0
CA_CERTS = """\
subject=/C=US/O=Equifax/OU=Equifax Secure Certificate Authority
issuer=/C=US/O=Equifax/OU=Equifax Secure Certificate Authority
-----BEGIN CERTIFICATE-----
MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV
UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy
dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1
MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx
dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f
BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A
cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC
AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ
MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm
aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw
ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj
IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF
MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA
A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y
7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh
1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4
-----END CERTIFICATE-----
"""
# SHA-1 digest of expected public key. See
# http://www.imperialviolet.org/2011/05/04/pinning.html for the reason behind
# hashing the public key, not the entire certificate.
PUBKEY_SHA1 = "fc54c0b2fcfcdfe4abf2f1755dfd3376f6481703".decode("hex")

LOG_DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

class options(object):
    email_addr = None
    imap_addr = None
    password_filename = None
    log_filename = DEFAULT_LOG_FILENAME
    log_file = sys.stdout
    daemonize = True
    pid_filename = None
    safe_logging = True
    imaplib_debug = False

class IMAP4_SSL_REQUIRED(imaplib.IMAP4_SSL):
    """A subclass of of IMAP4_SSL that uses ssl_version=ssl.PROTOCOL_TLSv1 and
    cert_reqs=ssl.CERT_REQUIRED."""
    def open(self, host = "", port = imaplib.IMAP4_SSL_PORT):
        self.host = host
        self.port = port
        self.sock = socket.create_connection((host, port))
        self.sslobj = ssl.wrap_socket(self.sock, ssl_version=ssl.PROTOCOL_TLSv1,
            cert_reqs=ssl.CERT_REQUIRED, ca_certs=self.certfile)
        self.file = self.sslobj.makefile('rb')

def usage(f = sys.stdout):
    print >> f, """\
Usage: %(progname)s --pass=PASSFILE
Facilitator-side helper for the facilitator-reg-email rendezvous. Polls
an IMAP server for email messages with client registrations, deletes
them, and forwards the registrations to the facilitator.

  -d, --debug             don't daemonize, log to stdout.
  -e, --email=ADDRESS     log in as ADDRESS (default "%(email_addr)s").
  -h, --help              show this help.
  -i, --imap=HOST[:PORT]  use the given IMAP server (default "%(imap_addr)s").
      --imaplib-debug     show raw IMAP messages (will include email password).
  -l, --log FILENAME      write log to FILENAME (default \"%(log)s\").
  -p, --pass=PASSFILE     use the email password contained in PASSFILE.
      --pidfile FILENAME  write PID to FILENAME after daemonizing.
      --unsafe-logging    don't scrub email password and IP addresses from logs.\
""" % {
    "progname": sys.argv[0],
    "email_addr": DEFAULT_EMAIL_ADDRESS,
    "imap_addr": fac.format_addr((DEFAULT_IMAP_HOST, DEFAULT_IMAP_PORT)),
    "log": DEFAULT_LOG_FILENAME,
}

def safe_str(s):
    """Return s if options.safe_logging is true, and "[scrubbed]" otherwise."""
    if options.safe_logging:
        return "[scrubbed]"
    else:
        return s

def log(msg):
    print >> options.log_file, (u"%s %s" % (time.strftime(LOG_DATE_FORMAT), msg)).encode("UTF-8")
    options.log_file.flush()

options.email_addr = DEFAULT_EMAIL_ADDRESS
options.imap_addr = (DEFAULT_IMAP_HOST, DEFAULT_IMAP_PORT)

opts, args = getopt.gnu_getopt(sys.argv[1:], "de:hi:l:p:", ["debug", "email=", "help", "imap=", "imaplib-debug", "log=", "pass=", "pidfile=", "unsafe-logging"])
for o, a in opts:
    if o == "-d" or o == "--debug":
        options.daemonize = False
        options.log_filename = None
    elif o == "-e" or o == "--email":
        options.email_addr = a
    elif o == "-h" or o == "--help":
        usage()
        sys.exit()
    elif o == "-i" or o == "--imap":
        options.imap_addr = fac.parse_addr_spec(a, DEFAULT_IMAP_HOST, DEFAULT_IMAP_PORT)
    if o == "--imaplib-debug":
        options.imaplib_debug = True
    elif o == "-l" or o == "--log":
        options.log_filename = a
    elif o == "-p" or o == "--pass":
        options.password_filename = a
    elif o == "--pidfile":
        options.pid_filename = a
    elif o == "--unsafe-logging":
        options.safe_logging = False

if len(args) != 0:
    usage(sys.stderr)
    sys.exit(1)

# Load the email password.
if options.password_filename is None:
    print >> sys.stderr, "The --pass option is required."
    sys.exit(1)
try:
    password_file = open(options.password_filename)
except Exception, e:
    print >> sys.stderr, """\
Failed to open password file "%s": %s.\
""" % (options.password_filename, str(e))
    sys.exit(1)
try:
    if not fac.check_perms(password_file.fileno()):
        print >> sys.stderr, "Refusing to run with group- or world-readable password file. Try"
        print >> sys.stderr, "\tchmod 600 %s" % options.password_filename
        sys.exit(1)
    email_password = password_file.read().strip()
finally:
    password_file.close()

if options.log_filename:
    options.log_file = open(options.log_filename, "a")
    # Send error tracebacks to the log.
    sys.stderr = options.log_file
else:
    options.log_file = sys.stdout

if options.daemonize:
    log(u"daemonizing")
    pid = os.fork()
    if pid != 0:
        if options.pid_filename:
            f = open(options.pid_filename, "w")
            print >> f, pid
            f.close()
        sys.exit(0)

# Drop root priviledges.
try:
    fac.drop_privs(USER)
except (KeyError, OSError), e:
    log(u"can't drop root priviledges")
    log(unicode(e))

if options.imaplib_debug:
    imaplib.Debug = 4

def find_client_addr(body):
    """Find and parse the first client line of the form
        client=...
    Returns None if no client line was found.
    """
    for line in body.splitlines():
        if line.startswith("client="):
            _, client_spec = line.split("=", 1)
            return fac.parse_addr_spec(client_spec)
    return None

def handle_message(msg):
    try:
        if fac.put_reg_base64(msg.get_payload()):
            log(u"registered client")
        else:
            log(u"failed to register client")
    except Exception, e:
        log(u"error registering client")
        raise

def truncate_repr(s, n):
    if not isinstance(s, basestring):
        s = repr(s)
    if len(s) > n:
        return repr(s[:n]) + "[...]"
    else:
        return repr(s)
def check_imap_return(typ, data):
    if typ != "OK":
        raise imaplib.IMAP4.abort("Got type \"%s\": %s" % (typ, truncate_repr(data, 100)))

def imap_get_uid(imap, index):
    typ, data = imap.fetch(str(index), "(UID)")
    if data[0] is None:
        return None
    check_imap_return(typ, data)
    # This grepping for the UID is bogus, but imaplib doesn't properly break up
    # the list of name-value pairs for us.
    m = re.match(r'^\d+\s+\(.*\bUID\s+(\d+)\b.*\)\s*$', data[0])
    if m is None:
        raise imaplib.IMAP4.abort("Can't find UID in %s" % repr(data[0]))
    return m.group(1)

# Gmail's IMAP folders are funny: they are not real folders, but actually views
# of messages having a particular label. INBOX consists of messages having the
# INBOX label, for example. Deleting a message from a folder just removes its
# label, but the message itself continues to exist in "[Gmail]/All Mail".
#   https://support.google.com/mail/bin/answer.py?answer=78755
#   http://gmailblog.blogspot.com/2008/10/new-in-labs-advanced-imap-controls.html
# To really delete a message, you must copy it to "[Gmail]/Trash" and then
# delete it from there. Messages in Trash are deleted automatically after 30
# days, but we do it immediately.
def imap_loop(imap):
    while True:
        # Copy all messages to Trash, and work on them from there. This is a
        # failsafe so that messages will eventually be deleted if we are not
        # able to retrieve them. This act of copying also deletes from All Mail.
        typ, data = imap.select("[Gmail]/All Mail")
        check_imap_return(typ, data)
        imap.copy("1:*", "[Gmail]/Trash")

        typ, data = imap.select("[Gmail]/Trash")
        check_imap_return(typ, data)
        exists = int(data[0])
        if exists > 0:
            while True:
                # Grab message 1 on each iteration; remaining messages shift down so
                # the next message we process is also message 1.
                uid = imap_get_uid(imap, "1")
                if uid is None:
                    break

                typ, data = imap.uid("FETCH", uid, "(BODY[])")
                check_imap_return(typ, data)
                msg_text = data[0][1]
                typ, data = imap.uid("STORE", uid, "+FLAGS", "\\Deleted")
                check_imap_return(typ, data)
                typ, data = imap.expunge()
                check_imap_return(typ, data)

                try:
                    msg = email.message_from_string(msg_text)
                    handle_message(msg)
                except Exception, e:
                    log("Error processing message, deleting anyway: %s" % str(e))

        time.sleep(POLL_INTERVAL)

def imap_login():
    """Make an IMAP connection, check the certificate and public key, and log in."""
    ca_certs_file = tempfile.NamedTemporaryFile(prefix="facilitator-email-poller-", suffix=".crt", delete=True)
    try:
        ca_certs_file.write(CA_CERTS)
        ca_certs_file.flush()
        imap = IMAP4_SSL_REQUIRED(options.imap_addr[0], options.imap_addr[1],
            None, ca_certs_file.name)
    finally:
        ca_certs_file.close()

    # Check that the public key is what we expect.
    cert_der = imap.ssl().getpeercert(binary_form=True)
    cert = X509.load_cert_string(cert_der, format=X509.FORMAT_DER)
    pubkey_der = cert.get_pubkey().as_der()
    pubkey_digest = sha1(pubkey_der).digest()

    if pubkey_digest != PUBKEY_SHA1:
        raise ValueError("Public key does not match pin: got %s but expected %s" %
            (pubkey_digest.encode("hex"), PUBKEY_SHA1.encode("hex")))

    log(u"logging in as %s" % options.email_addr)
    imap.login(options.email_addr, email_password)

    return imap

class RateLimit(object):
    INITIAL_INTERVAL = 1.0
    # These constants are chosen to reach a steady state of one attempt every
    # ten minutes, assuming a new failing attempt after each penalty interval.
    MAX_INTERVAL = 10 * 60
    MULTIPLIER = 2.0
    DECAY = math.log(MULTIPLIER) / MAX_INTERVAL
    def __init__(self):
        self.time_last = time.time()
        self.interval = self.INITIAL_INTERVAL
    def time_to_wait(self):
        now = time.time()
        delta = now - self.time_last
        # Discount time already served.
        wait = max(self.interval - delta, 0)
        self.time_last = now
        self.interval = self.interval * math.exp(-self.DECAY * delta) * self.MULTIPLIER
        return wait

login_limit = RateLimit()
while True:
    try:
        imap = imap_login()
        imap_loop(imap)
    except imaplib.IMAP4.abort, e:
        # Try again after a disconnection.
        log(u"lost server connection: %s" % str(e))
        # Don't reconnect too fast.
        t = login_limit.time_to_wait()
        if t > 0:
            log(u"waiting %.2f seconds before logging in again" % t)
            time.sleep(t)
    else:
        break

log(u"closing")
imap.close()
imap.logout()
