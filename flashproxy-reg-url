#!/usr/bin/env python

import base64
import getopt
import re
import socket
import sys
import urlparse

from M2Crypto import RSA, BIO
from flashproxy import parse_addr_spec, format_addr

DEFAULT_REMOTE_PORT = 9000
DEFAULT_FACILITATOR_URL = "https://tor-facilitator.bamsoftware.com/"

class options(object):
    facilitator_url = None

def usage(f = sys.stdout):
    print >> f, """\
Usage: %(progname)s REMOTE[:PORT]
Print a URL, which, when retrieved, will cause the client address
REMOTE[:PORT] to be registered with the flash proxy facilitator. The
default PORT is %(port)d.

  -f, --facilitator=URL  register with the given facilitator
                           (by default "%(fac_url)s").
  -h, --help             show this help.\
""" % {
    "progname": sys.argv[0],
    "fac_url": DEFAULT_FACILITATOR_URL,
    "port": DEFAULT_REMOTE_PORT,
}

FACILITATOR_PUBKEY_PEM = """\
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA44Mt8c599/4N2fgu6ppN
oatPW1GOgZxxObljFtEy0OWM1eHB35OOn+Kn9MxNHTRxVWwCEi0HYxWNVs2qrXxV
84LmWBz6A65d2qBlgltgLXusiXLrpwxVmJeO+GfmbF8ur0U9JSYxA20cGW/kujNg
XYDGQxO1Gvxq2lHK2LQmBpkfKEE1DMFASmIvlHDQgDj3XBb5lYeOsHZmg16UrGAq
1UH238hgJITPGLXBtwLtJkYbrATJvrEcmvI7QSm57SgYGpaB5ZdCbJL5bag5Pgt6
M5SDDYYY4xxEPzokjFJfCQv+kcyAnzERNMQ9kR41ePTXG62bpngK5iWGeJ5XdkxG
gwIDAQAB
-----END PUBLIC KEY-----
"""

options.facilitator_url = DEFAULT_FACILITATOR_URL

opt, args = getopt.gnu_getopt(sys.argv[1:], "f:h", ["facilitator=", "help"])
for o, a in opt:
    if o == "-f" or o == "--facilitator":
        options.facilitator_url = a
    elif o == "-h" or o == "--help":
        usage()
        sys.exit()

if len(args) != 1:
    usage(f=sys.stderr)
    sys.exit(1)

remote_addr = parse_addr_spec(args[0], defport=DEFAULT_REMOTE_PORT)
if remote_addr[0] is None:
    print >> sys.stderr, "An IP address (not just a port) is required."
    sys.exit(1)

reg_plain = (u"client=%s" % format_addr(remote_addr)).encode("utf-8")
rsa = RSA.load_pub_key_bio(BIO.MemoryBuffer(FACILITATOR_PUBKEY_PEM))
reg_crypt = rsa.public_encrypt(reg_plain, RSA.pkcs1_oaep_padding)
reg = base64.urlsafe_b64encode(reg_crypt)

print urlparse.urljoin(options.facilitator_url, "reg/" + reg)
